[
["stat-learn.html", "2 What Is Statistical Learning? 2.1 What Is Statistical Learning? 2.2 Assessing Model Accuracy 2.3 Lab: Introduction to R", " 2 What Is Statistical Learning? 2.1 What Is Statistical Learning? 2.2 Assessing Model Accuracy 2.3 Lab: Introduction to R 2.3.1 Basic Commands x &lt;- c(1, 3, 2, 5) x ## [1] 1 3 2 5 Use the assignment operator &lt;- to create new objects in R. Objects can be replaced (or overridden) by creating a new object with the same name. x &lt;- c(1, 6, 2) y &lt;- c(1, 4, 3) x ## [1] 1 6 2 y ## [1] 1 4 3 R performs simple mathematical calculations. For instance, to add numbers use the + notation. This will add the first value of x to the first value of y, and so on. R uses vector recycling if you try to combine vectors that are not the same length, so use length() to confirm that x and y contain the same number of values. length(x) ## [1] 3 length(y) ## [1] 3 x + y ## [1] 2 10 5 Many tidyverse functions will not implicitly perform vector recycling. If you need values or vectors repeated, you will need to explicitly repeat the values first and then run the function. ls() lists the names of all the objects currently in your working environment. ls() ## [1] &quot;x&quot; &quot;y&quot; If you are using RStudio, you can see this list in the upper-right panel of the IDE: RStudio IDE with environment highlighted Most tidyverse functions assume your data is stored in a data frame. A data frame is a spreadsheet style data object which stores values in columns and rows. A tidy data frame adheres to three basic principles: Each variable must have its own column Each observation must have its own row Each value must have its own cell Tibbles are a special type of data frame which work nicely with tidyverse packages and RStudio. To create a tibble, we first need to load the tibble package. Packages in R contain additional functions which build new features onto the base R software. Packages are loaded using the library() function, at which point all the functions in the library are now directly accessible. library(tibble) To create a tibble, we use the tibble() function: tibble( x = 1:5, y = 1, z = x ^ 2 + y ) ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 Each column of a tibble is defined as a vector, and columns can be created either by individual vectors or by recycling inputs of length 1. You can also create variables that are derived from already created columns (hence z). 2.3.2 Graphics ggplot2 is the tidyverse preferred package for generating graphics in R. It is structured on the layered grammar of graphics and provides a consistent syntax for creating both basic and advanced statistical graphs. See the data visualization cheat sheet for a summary of the core graphing functions in ggplot2. For instance, to create a basic scatterplot: # create simulated data scatter_data &lt;- tibble( x = rnorm(100), y = rnorm(100) ) library(ggplot2) # load ggplot2 # generate scatterplot ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() ggplot2 builds graphs in layers, so additional components are added using the + notation. To add labels to this graph, use the labs() function. ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() + labs(title = &quot;This is a plot of X vs Y&quot;, x = &quot;This is the x-axis&quot;, y = &quot;This is the y-axis&quot;) To export ggplot() objects, use ggsave(): x &lt;- ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() + labs(title = &quot;This is a plot of X vs Y&quot;, x = &quot;This is the x-axis&quot;, y = &quot;This is the y-axis&quot;) ggsave(filename = &quot;scatterplot.pdf&quot;, plot = x) ggplot2 is an excellent package for creating static two-dimensional graphs. For interactive or three-dimensional graphs, consider plot.ly or highcharter. 2.3.3 Indexing Data 2.3.4 Loading Data 2.3.5 Additional Graphical and Numerical Summaries "]
]
