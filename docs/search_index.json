[
["index.html", "An Introduction to Statistical Learning What this is about", " An Introduction to Statistical Learning with (Tidy) Applications in R Benjamin Soltoff 2018-07-23 What this is about This book is intended to serve as a companion to An Introduction to Statistical Learning with Applications in R (ISLR) and reimplement the R programs using primarily tidyverse packages and a tidy design philosophy. It is not intended to stand on its own or review the statistical learning concepts from ISLR. It is not intended to teach R programming or computational problem solving in general. For that, I recommend any number of online resources including Hadley Wickhamâ€™s R for Data Science and the materials from my graduate course on Computing for the Social Sciences. The original ISLR book is copyrighted by Springer. The original contribution in work is licensed under the CC BY-NC 4.0 Creative Commons License. "],
["intro.html", "1 Introduction", " 1 Introduction No labs included in this chapter. "],
["stat-learn.html", "2 What Is Statistical Learning? 2.1 What Is Statistical Learning? 2.2 Assessing Model Accuracy 2.3 Lab: Introduction to R 2.4 Install and load tidyverse packages 2.5 Session information", " 2 What Is Statistical Learning? 2.1 What Is Statistical Learning? 2.2 Assessing Model Accuracy 2.3 Lab: Introduction to R 2.3.1 Basic Commands x &lt;- c(1, 3, 2, 5) x ## [1] 1 3 2 5 Use the assignment operator &lt;- to create new objects in R. Objects can be replaced (or overridden) by creating a new object with the same name. x &lt;- c(1, 6, 2) y &lt;- c(1, 4, 3) x ## [1] 1 6 2 y ## [1] 1 4 3 R performs simple mathematical calculations. For instance, to add numbers use the + notation. This will add the first value of x to the first value of y, and so on. R uses vector recycling if you try to combine vectors that are not the same length, so use length() to confirm that x and y contain the same number of values. length(x) ## [1] 3 length(y) ## [1] 3 x + y ## [1] 2 10 5 Many tidyverse functions will not implicitly perform vector recycling. If you need values or vectors repeated, you will need to explicitly repeat the values first and then run the function. ls() lists the names of all the objects currently in your working environment. ls() ## [1] &quot;x&quot; &quot;y&quot; If you are using RStudio, you can see this list in the upper-right panel of the IDE: RStudio IDE with environment highlighted Most tidyverse functions assume your data is stored in a data frame. A data frame is a spreadsheet style data object which stores values in columns and rows. A tidy data frame adheres to three basic principles: Each variable must have its own column Each observation must have its own row Each value must have its own cell Tibbles are a special type of data frame which work nicely with tidyverse packages and RStudio. To create a tibble, we first need to load the tibble package. Packages in R contain additional functions which build new features onto the base R software. Packages are loaded using the library() function, at which point all the functions in the library are now directly accessible. Use install.packages() if you do not yet have this package installed: install.packages(&quot;tibble&quot;) library(tibble) To create a tibble, we use the tibble() function: tibble( x = 1:5, y = 1, z = x ^ 2 + y ) ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 Each column of a tibble is defined as a vector, and columns can be created either by individual vectors or by recycling inputs of length 1. You can also create variables that are derived from already created columns (hence z). 2.3.2 Graphics ggplot2 is the tidyverse preferred package for generating graphics in R. It is structured on the layered grammar of graphics and provides a consistent syntax for creating both basic and advanced statistical graphs. See the data visualization cheat sheet for a summary of the core graphing functions in ggplot2. For instance, to create a basic scatterplot: # create simulated data scatter_data &lt;- tibble( x = rnorm(100), y = rnorm(100) ) library(ggplot2) # load ggplot2 # generate scatterplot ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() ggplot2 builds graphs in layers, so additional components are added using the + notation. To add labels to this graph, use the labs() function. ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() + labs(title = &quot;This is a plot of X vs Y&quot;, x = &quot;This is the x-axis&quot;, y = &quot;This is the y-axis&quot;) To export ggplot() objects, use ggsave(): x &lt;- ggplot(data = scatter_data, aes(x = x, y = y)) + geom_point() + labs(title = &quot;This is a plot of X vs Y&quot;, x = &quot;This is the x-axis&quot;, y = &quot;This is the y-axis&quot;) ggsave(filename = &quot;scatterplot.pdf&quot;, plot = x) ggplot2 is an excellent package for creating static two-dimensional graphs. For interactive or three-dimensional graphs, consider plot.ly or highcharter. 2.3.3 Indexing Data Sometimes you want to examine only a portion of a tibble. Beyond the base R [ and [[ subsetting approaches, dplyr provides two core functions for subsetting a data frame. Consider the following tibble: df &lt;- tibble( x = 1:5, y = 1, z = x ^ 2 + y ) df ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 ## 2 2 1 5 ## 3 3 1 10 ## 4 4 1 17 ## 5 5 1 26 To subset specific rows, use filter(): library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 3.5.1 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union filter(.data = df, x &gt; 3) ## # A tibble: 2 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 1 17 ## 2 5 1 26 filter(.data = df, z &lt; 5) ## # A tibble: 1 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2 To subset specific columns, use select(): select(.data = df, x, y) ## # A tibble: 5 x 2 ## x y ## &lt;int&gt; &lt;dbl&gt; ## 1 1 1 ## 2 2 1 ## 3 3 1 ## 4 4 1 ## 5 5 1 select(.data = df, -y) ## # A tibble: 5 x 2 ## x z ## &lt;int&gt; &lt;dbl&gt; ## 1 1 2 ## 2 2 5 ## 3 3 10 ## 4 4 17 ## 5 5 26 2.3.4 Loading Data To import rectangular data files like .csv or .tsv, use read_csv() or read_tsv() from the readr package: library(readr) Auto &lt;- read_csv(&quot;data/auto.csv&quot;) ## Parsed with column specification: ## cols( ## mpg = col_double(), ## cylinders = col_integer(), ## displacement = col_double(), ## horsepower = col_integer(), ## weight = col_double(), ## acceleration = col_double(), ## year = col_integer(), ## origin = col_integer(), ## name = col_character() ## ) Auto ## # A tibble: 392 x 9 ## mpg cylinders displacement horsepower weight acceleration year origin ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 18 8 307 130 3504 12 70 1 ## 2 15 8 350 165 3693 11.5 70 1 ## 3 18 8 318 150 3436 11 70 1 ## 4 16 8 304 150 3433 12 70 1 ## 5 17 8 302 140 3449 10.5 70 1 ## 6 15 8 429 198 4341 10 70 1 ## # ... with 386 more rows, and 1 more variable: name &lt;chr&gt; read_() functions automatically decode each column type, a header row (if available), and import the data quickly and efficiently. Generally these guesses for column type are accurate, though they can always be manually defined. To import other file types, consider these packages: haven - SAS, SPSS, and Stata readxl - Excel googledrive - Google Sheets 2.3.5 Additional Graphical and Numerical Summaries Variable names are passed to ggplot() using the aes() function. ggplot(data = Auto, aes(x = cylinders, y = mpg)) + geom_point() Since cylinders is essentially a categorical variable (not enough unique values to be considered continuous), we could store it as a qualitative variable using as.factor() and then visualize this data using a boxplot. To convert a column in-place, we use mutate() from the dplyr package: # convert cylinders to a factor variable Auto &lt;- mutate(.data = Auto, cylinders = as.factor(cylinders)) Auto ## # A tibble: 392 x 9 ## mpg cylinders displacement horsepower weight acceleration year origin ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 18 8 307 130 3504 12 70 1 ## 2 15 8 350 165 3693 11.5 70 1 ## 3 18 8 318 150 3436 11 70 1 ## 4 16 8 304 150 3433 12 70 1 ## 5 17 8 302 140 3449 10.5 70 1 ## 6 15 8 429 198 4341 10 70 1 ## # ... with 386 more rows, and 1 more variable: name &lt;chr&gt; ggplot(data = Auto, aes(x = cylinders, y = mpg)) + geom_boxplot() The visual appearance of the boxplot can be customized using either additional arguments to geom_boxplot() or adding additional components: ggplot(data = Auto, aes(x = cylinders, y = mpg)) + geom_boxplot(color = &quot;red&quot;) ggplot(data = Auto, aes(x = cylinders, y = mpg)) + geom_boxplot(color = &quot;red&quot;) + labs(x = &quot;Number of cylinders&quot;, y = &quot;MPG&quot;) To create a scatterplot matrix, use ggpairs() from the GGally package: library(GGally) ## ## Attaching package: &#39;GGally&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## nasa ggpairs(data = select(.data = Auto, -name)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. We need to exclude the name column because it is just an ID column - there is nothing informative in this column to create a scatterplot matrix. We could also write this code using the pipe operator %&gt;% to first subset the tibble, then create the scatterplot matrix: select(.data = Auto, -name) %&gt;% ggpairs() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Piped operations are a powerful tool in the tidyverse to write human-readable code that clearly defines each step of a multi-operation chunk of code. 2.4 Install and load tidyverse packages The easiest method to install and load tidyverse packages is to install tidyverse. This package automatically downloads and installs the complete tidyverse. When you load the package with library(tidyverse), it will automatically load the core tidyverse and make it available in your current R session. The core tidyverse is a set of packages you are likely to use in everyday data analyses. All other tidyverse packages can be loaded directly using library(). install.packages(&quot;tidyverse&quot;) library(tidyverse) ## â”€â”€ Attaching packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.2.1 â”€â”€ ## âœ” tidyr 0.8.1 âœ” stringr 1.3.1 ## âœ” purrr 0.2.5 âœ” forcats 0.3.0 ## â”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€ ## âœ– dplyr::filter() masks stats::filter() ## âœ– dplyr::lag() masks stats::lag() 2.5 Session information devtools::session_info() ## Session info ------------------------------------------------------------- ## setting value ## version R version 3.5.0 (2018-04-23) ## system x86_64, darwin15.6.0 ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## tz America/Chicago ## date 2018-07-23 ## Packages ----------------------------------------------------------------- ## package * version date source ## assertthat 0.2.0 2017-04-11 CRAN (R 3.5.0) ## backports 1.1.2 2017-12-13 CRAN (R 3.5.0) ## base * 3.5.0 2018-04-24 local ## bindr 0.1.1 2018-03-13 CRAN (R 3.5.0) ## bindrcpp * 0.2.2 2018-03-29 CRAN (R 3.5.0) ## bookdown 0.7 2018-02-18 CRAN (R 3.5.0) ## broom 0.4.4 2018-03-29 CRAN (R 3.5.0) ## cellranger 1.1.0 2016-07-27 CRAN (R 3.5.0) ## cli 1.0.0 2017-11-05 CRAN (R 3.5.0) ## codetools 0.2-15 2016-10-05 CRAN (R 3.5.0) ## colorspace 1.3-2 2016-12-14 CRAN (R 3.5.0) ## compiler 3.5.0 2018-04-24 local ## crayon 1.3.4 2017-09-16 CRAN (R 3.5.0) ## datasets * 3.5.0 2018-04-24 local ## devtools 1.13.5 2018-02-18 CRAN (R 3.5.0) ## digest 0.6.15 2018-01-28 CRAN (R 3.5.0) ## dplyr * 0.7.6 2018-06-29 cran (@0.7.6) ## evaluate 0.10.1 2017-06-24 CRAN (R 3.5.0) ## forcats * 0.3.0 2018-02-19 CRAN (R 3.5.0) ## foreign 0.8-70 2017-11-28 CRAN (R 3.5.0) ## GGally * 1.4.0 2018-05-17 CRAN (R 3.5.0) ## ggplot2 * 3.0.0 2018-07-03 CRAN (R 3.5.0) ## glue 1.2.0 2017-10-29 CRAN (R 3.5.0) ## graphics * 3.5.0 2018-04-24 local ## grDevices * 3.5.0 2018-04-24 local ## grid 3.5.0 2018-04-24 local ## gtable 0.2.0 2016-02-26 CRAN (R 3.5.0) ## haven 1.1.1 2018-01-18 CRAN (R 3.5.0) ## hms 0.4.2 2018-03-10 CRAN (R 3.5.0) ## htmltools 0.3.6 2017-04-28 CRAN (R 3.5.0) ## httr 1.3.1 2017-08-20 CRAN (R 3.5.0) ## ISLR 1.2 2017-10-20 CRAN (R 3.5.0) ## jsonlite 1.5 2017-06-01 CRAN (R 3.5.0) ## knitr 1.20 2018-02-20 CRAN (R 3.5.0) ## lattice 0.20-35 2017-03-25 CRAN (R 3.5.0) ## lazyeval 0.2.1 2017-10-29 CRAN (R 3.5.0) ## lubridate 1.7.4 2018-04-11 CRAN (R 3.5.0) ## magrittr 1.5 2014-11-22 CRAN (R 3.5.0) ## memoise 1.1.0 2017-04-21 CRAN (R 3.5.0) ## methods * 3.5.0 2018-04-24 local ## mnormt 1.5-5 2016-10-15 CRAN (R 3.5.0) ## modelr 0.1.2 2018-05-11 CRAN (R 3.5.0) ## munsell 0.4.3 2016-02-13 CRAN (R 3.5.0) ## nlme 3.1-137 2018-04-07 CRAN (R 3.5.0) ## parallel 3.5.0 2018-04-24 local ## pillar 1.2.3 2018-05-25 CRAN (R 3.5.0) ## pkgconfig 2.0.1 2017-03-21 CRAN (R 3.5.0) ## plyr 1.8.4 2016-06-08 CRAN (R 3.5.0) ## psych 1.8.4 2018-05-06 CRAN (R 3.5.0) ## purrr * 0.2.5 2018-05-29 CRAN (R 3.5.0) ## R6 2.2.2 2017-06-17 CRAN (R 3.5.0) ## RColorBrewer 1.1-2 2014-12-07 CRAN (R 3.5.0) ## Rcpp 0.12.17 2018-05-18 CRAN (R 3.5.0) ## readr * 1.1.1 2017-05-16 CRAN (R 3.5.0) ## readxl 1.1.0 2018-04-20 CRAN (R 3.5.0) ## reshape 0.8.7 2017-08-06 CRAN (R 3.5.0) ## reshape2 1.4.3 2017-12-11 CRAN (R 3.5.0) ## rlang 0.2.1 2018-05-30 CRAN (R 3.5.0) ## rmarkdown 1.9 2018-03-01 CRAN (R 3.5.0) ## rprojroot 1.3-2 2018-01-03 CRAN (R 3.5.0) ## rstudioapi 0.7 2017-09-07 CRAN (R 3.5.0) ## rvest 0.3.2 2016-06-17 CRAN (R 3.5.0) ## scales 0.5.0 2017-08-24 CRAN (R 3.5.0) ## stats * 3.5.0 2018-04-24 local ## stringi 1.2.2 2018-05-02 CRAN (R 3.5.0) ## stringr * 1.3.1 2018-05-10 CRAN (R 3.5.0) ## tibble * 1.4.2 2018-01-22 CRAN (R 3.5.0) ## tidyr * 0.8.1 2018-05-18 CRAN (R 3.5.0) ## tidyselect 0.2.4 2018-02-26 CRAN (R 3.5.0) ## tidyverse * 1.2.1 2017-11-14 CRAN (R 3.5.0) ## tools 3.5.0 2018-04-24 local ## utils * 3.5.0 2018-04-24 local ## withr 2.1.2 2018-03-15 CRAN (R 3.5.0) ## xfun 0.1 2018-01-22 CRAN (R 3.5.0) ## xml2 1.2.0 2018-01-24 CRAN (R 3.5.0) ## yaml 2.1.19 2018-05-01 CRAN (R 3.5.0) "]
]
